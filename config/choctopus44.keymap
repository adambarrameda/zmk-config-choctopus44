/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <280>;
    flavor = "balanced";
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    hold-trigger-on-release;
};

&sk {
    release-after-ms = <500>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        del {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
        };

        delii {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 15>;
        };

        dword {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <19 21>;
        };

        dwordii {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <14 16>;
        };

        dline {
            bindings = <&kp LG(RET)>;
            key-positions = <19 22>;
        };

        dlineii {
            bindings = <&kp LG(RET)>;
            key-positions = <16 13>;
        };

        ret {
            bindings = <&kp RET>;
            key-positions = <22 41>;
        };

        retii {
            bindings = <&kp RET>;
            key-positions = <13 40>;
        };

        boot {
            bindings = <&bootloader>;
            key-positions = <0 11>;
        };

        oprn {
            bindings = <&oprn>;
            key-positions = <7 8>;
        };

        cprn {
            bindings = <&cprn>;
            key-positions = <8 9>;
        };

        obkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <32 33>;
        };

        cbkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <33 34>;
        };

        semi {
            bindings = <&kp SEMI>;
            key-positions = <20 21>;
        };

        eol {
            bindings = <&kp LS(N4)>;
            key-positions = <7 19>;
        };

        ampr {
            bindings = <&kp LS(N7)>;
            key-positions = <8 20>;
        };

        pipe {
            bindings = <&kp LS(BACKSLASH)>;
            key-positions = <9 21>;
        };

        bslh {
            bindings = <&kp BACKSLASH>;
            key-positions = <21 22>;
        };

        hash {
            bindings = <&kp LS(N3)>;
            key-positions = <19 32>;
        };

        pct {
            bindings = <&kp LS(N5)>;
            key-positions = <33 20>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <28 26>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
        };

        pste {
            bindings = <&kp LG(V)>;
            key-positions = <28 27>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <25 26>;
        };

        redo {
            bindings = <&kp LG(LS(Z))>;
            key-positions = <29 28>;
        };
    };

    behaviors {
        cmqst: cmqst {
            compatible = "zmk,behavior-mod-morph";
            label = "CMQST";
            bindings = <&kp COMMA>, <&kp LS(FSLH)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pdex: pdex {
            compatible = "zmk,behavior-mod-morph";
            label = "PDEX";
            bindings = <&kp PERIOD>, <&kp LS(N1)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slastk: slastk {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASTK";
            bindings = <&kp FSLH>, <&kp LS(N8)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        oprn: oprn {
            compatible = "zmk,behavior-mod-morph";
            label = "OPRN";
            bindings = <&kp LS(N9)>, <&kp LS(COMMA)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cprn: cprn {
            compatible = "zmk,behavior-mod-morph";
            label = "CPRN";
            bindings = <&kp LS(N0)>, <&kp LS(PERIOD)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        def {
            bindings = <
&kp GRAVE     &kp Q            &kp W     &kp E                       &kp R         &kp T                       &kp Y        &kp U      &kp I       &kp O         &kp P      &kp GRAVE
&kp LEFT_GUI  &mt LEFT_ALT A   &kp S     &kp D                       &kp F         &kp G                       &kp H        &kp J      &kp K       &kp L         &kp SQT    &slastk
&kp LCTRL     &mt RIGHT_ALT Z  &kp X     &kp C                       &kp V         &kp B           &kp C_MUTE  &kp N        &kp M      &cmqst      &pdex         &kp MINUS  &kp EQUAL
                               &kp LEFT  &mt LS(LA(LC(LGUI))) RIGHT  &lt 5 ESCAPE  &sk LEFT_SHIFT              &lt 2 SPACE  &lt 3 TAB  &lt 4 DOWN  &kp UP_ARROW
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        alt {
            bindings = <
&kp ESC    &kp Q  &kp W   &kp E   &kp R   &kp T          &kp Y   &kp U      &kp I    &kp O     &kp P     &trans
&kp CAPS   &kp A  &kp S   &kp D   &kp F   &kp G          &kp H   &kp J      &kp K    &kp L     &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X   &kp C   &kp V   &kp B   &kp N  &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans    &kp ENTER
                  &trans  &trans  &trans  &trans         &trans  &trans     &trans   &trans
            >;
        };

        num {
            bindings = <
&kp A   &trans  &trans  &trans  &trans  &trans          &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp N0  &kp N1  &kp N2  &kp N3  &trans  &trans
                &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans         &trans       &trans     &trans  &trans
                &trans  &trans  &trans  &trans          &trans    &trans         &trans       &trans
            >;
        };

        sys {
            bindings = <
&trans  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans
                      &trans        &trans        &trans        &trans              &trans  &trans  &trans  &trans
            >;
        };

        fun {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6           &trans  &trans  &trans  &trans  &trans  &trans
&kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans   &trans   &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans   &trans   &trans           &trans  &trans  &trans  &trans
            >;
        };
    };
};
